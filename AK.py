from PyQt5.QtSql import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import sys
import os
import sqlite3
from PyQt5.QtCore import Qt, QRect
from base64 import b64decode


# from PyQt5.QtCore import QCoreApplication

def get_pic(pic_code, pic_name):
    image = open(pic_name, 'wb')
    image.write(b64decode(pic_code))
    image.close()


BM_PNG = "iVBORw0KGgoAAAANSUhEUgAAAdsAAAEcCAYAAACPlx44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAARHSURBVHhe7dUxAQAgDMAwtOwB/waHin45oiHnvlkAoCNbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWAmGwBICZbAIjJFgBisgWA1OwHrUarHA2/9jEAAAAASUVORK5CYII="
exit_ico = ""
about_png = ""
add_png = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAAAXNSR0IArs4c6QAAEOZJREFUeF7tnWuMVdUVx9c6MwnSxET4osTGT2Ai9GE/qUgrivhM555zruMralsB21RjVUyZ9gv4pYUGRBttWovWqvE1ztnnTqMiKL22ivip9oEmMp9MCfoFSEiKJDNnNZucibxm7nntu1/rJCSTy9pr7/Vf+3fPPffuvTYCX6wAKzCjAsjasAKswMwKMCA8O1iBWRRgQHh6sAIMCM8BVqCaAnwHqaYbt/JEAQbEk0RzmNUUYECq6catPFGAAfEk0RxmNQUYkGq6cStPFGBAPEk0h1lNAQakmm7cyhMFGBBPEs1hVlOAAammG7fyRAEGxJNEc5jVFGBAqunGrTxRgAHxJNEcZjUFGJBqunErTxRgQDxJNIdZTQEGpJpu3MoTBRgQTxLNYVZTgAGpphu38kQBBsSTRHOY1RRgQKrpxq08UYAB8STRHGY1BRiQarpxK08UYEA8STSHWU0BBqSabtzKEwUYEE8SzWFWU4ABqaZbqVbDw8Nzjx07tmhgYGAhIi4EgHOyLJuLiHMB4CwAOP63fE06DoLgKBEdBQD570v5t3wNAA4T0cTU1NTEnDlz9o2OjsrX+FKoAAPSsLitVmtxEARXA8A3AUDCsAgAzm+4m2l3+wFgHwBMAMC/syx7u9PpfKyoLy/dMiA10y6BQMTLgiBYRkQrFcJQdKT7EXFnlmXvEdEHDExR2c5sx4BU0K/Vai1FxBgRrwOAJRVc9LPJXiLaTkRJp9PZ3c+OXeiLASmYxTiOFxBRDADy31UFm5lmtgsAEkRMkiQ5YNrgTBwPA9IjK+12+wYJBhG15cO1iUmsMKbDiDgmQRkbG3ujQntvmjAgM6Q6juObiGgVAMiPUS5f2xHx6SRJXnM5yKqxMSCnKBeG4Z2IeDcALK8qqqXtukT0TJqmz1s6fiXDZkByWaMoWgMAEoxLlShtj9M9APCMEOKP9gxZ3Ui9BySKIvnAvQ4ArlEns5WedwDAJiGEfLD39vIWkKGhoXMHBgYkGA96m/1igW+dmpraND4+/kUxc7esvAQkjuPV8q5BRPKXbr56KICI8pf6TUmSbPNNLK8AiaLoQgDYCACRb4luKF4BACNCiE8b8me8G28ACcPwtiAINhLRBcZnxeABIuJnWZaNpGn6ksHDbGxozgOyfPnywfnz50sw1jamGjsCRNxy8ODBkW63O+myHE4D0m63L8myTH6k8u03jX7N2W4QBCNjY2Mf9qvDfvfjLCBhGN6BiL8DgLP7Lapn/R0hop+mafqCi3E7CUgURfcDwOMuJszgmH4mhPitweOrNDTnAAnDcD0ibqikBjeqpQARPZKmqVPaOwVIGIYbEHF9rSxz41oKuAaJM4AwHLXmdaONXYLECUCiKHoIALY0mmV2VleBtUKIR+s60d3eekDiOL6FiF7WLST3f7oCiHhrkiSv2KyN1YBEUTQMAK/anAAPxn6zEGLU1jitBYThsGrKWQuJlYAwHFbBMT1YKyGxDpB8+chO/oXcOkiOBEGw0rZlKVYBIhcezps3T8LBa6us4+P4gLuHDh1aadMCR6sAieN4M6/KtZOM6VHLVcBJkjxsSxTWACL3cyDii7YIy+OcWQEiut2W/SRWACJ3Asp6s7zZyQ3s5KYrWcfYhp2JtgCS8DZZN+A4IQohhJBlXI2+jAdEFlggIq7RZPQ0qjY4RFxjeiEIowGRpXkGBwdlGX/Xqo/IKobvlplWiHiFa9/eyWopk5OTy0wuKWQ0IFEUycVuLtat6gohriwDSBRFf3UNkDz+rUIIudjUyMtYQPKKh+8YqVr9QTEgJ2u4wtQKjiYD8pbD5UAZkJMB2SGEuLb++07zHowEJC8k/VTz4RrjkQE5PRX3mFgw21RAPnC8yjoDcjoge4QQlxnzFpYPxDhA8vM5njNNqIbHw4CcQVAiusu080mMA8Thb2tOnBIMyJnfcUrr0vAb12nujAIkP/bM2t1nJZJVeiJ48sYhS5oOm3QcnFGARFH0pgdnAkqOGJCZ3022CyGuL/Fmo9TUGEDkabJZlr2uNFpznDMgs+QiCIIbTTl91xhA4jjelp8qa840VjcSBmQWbfNTd+UhR9ovIwCJ43gBEX3s0DnkvRLLgMyukDzHfXGSJAd6Can6/40AJIqiewHgCdXBGuSfAemdjPuEEE/2NlNrYQogcs2VPG3Wl4sB6Z3pXUKIFb3N1FpoB6TVai0NguB9tWEa550BKZCSLMsu73Q6uwuYKjPRDkgYhpsR0bfj0RiQAlOaiLakaaq1wIN2QKIokg/nFxXQyyUTBqRYNj8RQiwuZqrGSisgYRhejIj/UBOa0V4ZkILpIaLvpGn6UUHzxs20AuLxUWkMSPGprPVoN92AyHVXNxXXyhlLBqR4Kl8TQsgq/lou3YDIH4LO0xK53k4ZkOL6fy6EWFDcvFlLbYB4/PwhM8iAlJjHOp9DdALyACJuLaGTS6YMSIlsEtGDaZo+VqJJY6baAImiSBaDM2JBWmNqFnfEgBTXSlpuE0KsKdekGWudgLha56lIZhiQIip9ZVNar3LuZ7bWCch/AeD8pgKxzE/phPuyo3CGPO4XQnxdR461ADI8PDx3cnLyfzoCNqRPBqRkIgYHB782Ojp6tGSz2uZaABkaGvrWwMDAP2uP3l4HDEjJ3E1NTX17fHz8XyWb1TbXAkgURbLs/Vjt0dvrgAEpn7u2EEIeg9HXSwsgcRz/nIg29TVSszpjQErmAxHXJUnym5LNapvrAuRXRPSL2qOv56Bbr3m91hWru9frtF5rrQenIuKvkyT5Zb0QyrfWAkgYhlsR8YHyw22uBRE9kqbphuY8uuspDMMNiLheZ4RE9Fiapn0/CkMLIFEU/R4AfqxZcAakYAJMAAQA/iCE+EnBITdmpguQZwHgB41FUcER30GKi2YIIH8WQvyw+KibsdQFyCsAcHMzIVTzwoAU180QQF4VQtxSfNTNWGoBJI7jcSL6fjMhVPPCgBTXzQRAEPEvSZIMFR91M5ZaAAnDcCciXt1MCNW8MCDFdTMBECJ6O03TlcVH3YwlA9KMjk57YUD6nF7+iNVnwWt2ZwIgXn3EiqKIH9JrTtp+NjcBEADw5yE9iiL+mrefM7xmX4YA4tXXvPxDYc1J28/mhgDizw+FvNSkn9O7fl8mAOLVUpM4jnmxohBXlpm6+Y7CMk2atuXFik0rOpM/Xu7OZX/KzjWvlrvzhikGpCwgAODPhinecsuAlAXEqy23XLSBASkLiFdFG6Q4URRx2Z8Ss4TL/nhU9icHhAvHMSBFFSi9h7+o4152WhYr5oBw6dFe2Tnh/z2/g3hZevR+AHi8xBxxybT0O6LngGg7REfbHaTVai0OgmCvS7O+RCwMSAmxsixb0ul05FmWfb+0AeL5gzoDUnyqa6vLK4eoFZA4jv9ERH3fiF88N8osGZCC0iLis0mS/KigeeNmWgEJw3AVIm5rPCrzHTIgBXNERKvTNH26oHnjZloB8fg5hAEpOJV1Pn9o/4iVP4f8BwCWFNTLFTMGpFgm9wohvlHMVI2V1juIDCkMw82IuFZNeMZ6ZUAKpIaItqRp+nABU2Um2gFptVpLgyB4X1mEZjpmQArkJcuyyzudzu4CpspMtAOSf8x6BwCuUhaleY4ZkN452SWEWNHbTK2FKYDcCwBPqA3VKO8MSO903CeEeLK3mVoLIwCJ43gBEclfSs9RG64x3hmQ2VNxGBEXJ0lyQHfGjABEihDH8TYiWqVbkD71z4DMIjQiPp0kyeo+5WLWbowBpN1u35Bl2esmiNKHMTAgs4gcBMGNY2Njb/QhDz27MAaQ/GH9TQC4rueo7TdgQGbO4XYhxPWmpNgoQOI4vomIRk0RR+E4GJAZxEXE4SRJXlOofSnXRgGS30V82GnIgJx5mpbWpdRsr2BsHCBhGN6JiM9ViMWmJqUngg8bpojorjRNnzcpkcYBkt9FPgCAS00SquGxMCCnC7pHCHFZwzrXdmcqIGsA4Kna0ZnrgAE5PTf3CCFknQKjLiMBye8ibwHANUap1dxgGJCTtdwhhLi2OXmb82QyIHJtllyj5eLFgJyc1RVCiF0mJtpYQPK7yKMA8KCJwtUcEwPylYBbhRAP1dRTWXOjARkaGjp3cHDwPSJaqEwBPY67RPRuma4R8QoA0HoEQZnxFrFFxInJycll4+PjXxSx12FjNCBSkDiOVxORcQ9vOpLlWp+IuCZJEqNrEhgPSP5RK5HlfF2bIJ7HI4QQseka2ALIhYi4k4guMF1QHl9vBRDxMyJaKYT4tLe1XgsrAJEShWF4GyK+qFcu7r0JBYjo9jRNX2rCl2of1gCSP49sJiLfCjyongN99Y+IW5Ik0VqIoUzAVgGyfPnywXnz5u107ducMgmz3LZ76NChld1ud9KWOKwCRIrabrcvybJMQnK2LSLzOI8rcCQIgpVjY2Mf2qSHdYDkzyN3IKJRqz5tSrqOsRLRnWmavqCj7zp9WgmIDDiKIp/PF6mTcx1ttZ3vUTdYawHJ7yTrEXFDXRG4vToFiOiRNE2tzZHVgOSQbEDE9epSzJ6rKmA7HDJu6wFhSKpOX7XtXIDDGUDyZxK5InSL2rSz94IKrBVCyJXY1l9O3EGmsxDH8S1E9LL1WbE4AES8NUmSVywO4aShOwVIficZBoBXXUmQZXHcLIRwqmyTc4AwJNqQcg4Op55BTp0WURTJO4k8245/cVfLzBEAWOXanWNaMifvINPB5ctSNvLaLWWEdIMgGLFt+UgZNZwGRAohFzjOnz9/I68CLjMtetvKVbkHDx4csWnhYe+oTrdwHpDpkOV+kiAIJCi86arKTMnbyM1OWZaN2LKfo0aox5t6A0j+8H4hAMiPXLx9t9rMEQAwYsNOwGrheXwHOTF0WQgCANY5WC2lqXlx8m8BiBMAsMn0AgsqgvfqDnKigLKk0MDAwDpH6241OVe2Tk1NbTK5NE+TwZ7qy1tApoWIokhWcJSguFrmtOr82SHvGqZWPKwaVNl23gNyAiiyYPbdjleVLzI/9gDAMyYWki4y+KZtGJBTFM3PJ5GgOFXFsMDEkdUenzHtfI4C41ZqwoDMIG9+HJw8ddf1MxO356fKGnPsmdIZX9I5A9JDMHn6LhHFRNR26Bx3eQ75GCImppwmW3Le9s2cASkodRzHCyQoslwwAMgHexsvecRAIsFIkuSAjQH0e8wMSAXFW63WUkSMEfEGALiogot+NvmEiN4goqTT6ezuZ8cu9MWA1MxiGIYXI+L3AOC7ALAMAM6r6bJu888B4D0A+DsR/S1N04/qOvS5PQPScPYlMPIbMERcAgDyXJNFAHB+w91Mu9sPAPsAYIKI9gJAl4FoVmkGpFk9z+hteHh47rFjxxYNDAwsREQJzTlZls1FxLkAcBYAHP9bviYdBEFwlIiOAoD896X8W74GAIeJaGJqampizpw5+0ZHR+VrfClUgAFRKC67tl8BBsT+HHIEChVgQBSKy67tV4ABsT+HHIFCBRgQheKya/sVYEDszyFHoFABBkShuOzafgUYEPtzyBEoVIABUSguu7ZfAQbE/hxyBAoVYEAUisuu7VeAAbE/hxyBQgUYEIXismv7FWBA7M8hR6BQAQZEobjs2n4FGBD7c8gRKFSAAVEoLru2XwEGxP4ccgQKFWBAFIrLru1XgAGxP4ccgUIFGBCF4rJr+xVgQOzPIUegUAEGRKG47Np+BRgQ+3PIEShUgAFRKC67tl8BBsT+HHIEChVgQBSKy67tV4ABsT+HHIFCBRgQheKya/sV+D9hwQAj4neJRwAAAABJRU5ErkJggg=="
delete_fill_png = ""
modify_png = "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"
modify_login_png = "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"
exit_png = "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"

get_pic(BM_PNG, 'BM.png')
get_pic(exit_ico, 'exit.ico')
get_pic(exit_png, 'exit.png')
get_pic(about_png, 'about.png')
get_pic(add_png, 'add.png')
get_pic(delete_fill_png, 'delete_fill.png')
get_pic(modify_png, 'modify.png')
get_pic(modify_login_png, 'modify_login.png')

style = """
        .QPushButton{
        border-style:none;
        border:1px solid #C2CCD8; 
        color:#fff;  
        padding:5px;
        min-height:25px;
        #border-radius:5px;
        selection-color:pink;
        font-size:20px;
        font-weight:800;
        #backgrounE:qlineargradient(spreaE:pad,x1:0,y1:0,x2:0,y2:1,stop:0 #4D4D4D,stop:1 #292929);#渐变色
        }
        # .QPushButton:hover{background-color:white; color: black;}
        # .QPushButton:pressed{background-color:rgb(46, 104, 170); border-style: inset; }
        .QLineEdit{
        font-family:"Courier New";
        font-size:20px;
        }
    """
button_hover = "QPushButton:hover{background-color:rgb(224, 128, 49);}"


# 创建数据库连接
def createConnection():
    # 选择数据库类型，这里为sqlite3数据库
    db = QSqlDatabase.addDatabase("QSQLITE")
    # 创建数据库test0.db,如果存在则打开，否则创建该数据库
    db.setDatabaseName("wcbAccount.db")
    # 打开数据库
    db.open()


# 创建表
def createTable():
    # 创建QsqlQuery对象，用于执行sql语句
    q = QSqlQuery()
    q.exec_("create table if not exists t1 (Website varchar(20), ID varchar(20), Password varchar(20))")
    # q.exec_("delete from t1")
    # 这里使用 u 将字符串转换成unicode编码，解决中文乱码
    conn = sqlite3.connect('wcbAccount.db')
    c = conn.cursor()
    c.execute("SELECT ID,Password FROM t1 WHERE Website='admin'")
    if not c.fetchone():
        q.exec_(u"insert into t1  values('admin','admin','admin')")
    q.exec_("commit")


class Model(QSqlTableModel):
    def __init__(self, parent):
        QSqlTableModel.__init__(self, parent)
        # 设置要载入的表名
        self.setTable("t1")
        # 这一步应该是执行查询的操作，不太理解
        self.select()
        # 数据更新的策略，详细可以查看Qt文档
        self.setEditStrategy(QSqlTableModel.OnManualSubmit)


# 表格，用于展示数据库中的数据
class TestWidget(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.resize(1400, 800)  # 窗口大小
        self.view = QTableView()
        self.model = Model(self.view)
        self.view.setModel(self.model)
        self.view.setFont(QFont("Courier New", 10))  # 设置表格字体
        # 按键布置
        # self.addbtn = QPushButton('Add')
        # self.delbtn = QPushButton('Delete')
        # self.cz = QPushButton("Modify LoginInfo")
        # # self.Tabclose = QPushButton("Close")
        # self.modify = QPushButton("Modify")
        # 按键样式设置
        # self.addbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        # self.addbtn.setStyleSheet(button_hover)
        # self.delbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        # self.delbtn.setStyleSheet(button_hover)
        # self.cz.setFont(QFont("Courier New", 10, QFont.Bold))
        # self.cz.setStyleSheet(button_hover)
        # self.Tabclose.setFont(QFont("Courier New", 10, QFont.Bold))
        # self.Tabclose.setStyleSheet(button_hover)
        # self.modify.setFont(QFont("Courier New", 10, QFont.Bold))
        # self.modify.setStyleSheet(button_hover)
        # 表格样式设置
        # self.view.setEditTriggers(QAbstractItemView.NoEditTriggers)  # 设置单元格不可编辑
        # self.view.setSelectionBehavior(QTableView.SelectRows)  # 选取整行
        self.view.setAlternatingRowColors(True)  # 交替变色
        self.view.setStyleSheet("alternate-background-color: #F5F5F5;")  # 定义交替的色号
        self.view.horizontalHeader().setStyleSheet("::section{Background-color:#292929;color:#fff}")  # rgb末尾表示透明度0-255
        self.view.horizontalHeader().setFont(QFont("Courier New", 11, QFont.Bold))
        self.view.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view.setFrameShape(QFrame.NoFrame)  # 无边框
        # 布局设置
        wwg = QWidget(self)
        wl = QHBoxLayout(wwg)
        # layout = QGridLayout()
        # layout.addWidget(self.addbtn, 0, 0)
        # layout.addWidget(self.delbtn, 1, 0)
        # layout.addWidget(self.cz, 2, 0)
        # layout.addWidget(self.modify, 3, 0)
        # layout.addWidget(self.Tabclose, 4, 0)
        wl.addWidget(self.view)
        # wl.addLayout(layout)
        # wl.setStretchFactor(layout, 1)
        # wl.setStretchFactor(self.view, 7)
        self.setLayout(wl)
        self.setStyleSheet(style)

    # def paintEvent(self, event):  # 设置背景图片
    #     self.painter = QPainter()
    #     self.painter.begin(self)
    #     self.painter.drawPixmap(self.rect(), QPixmap(resource_path(r"pic\1.png")))
    #     self.painter.end()


# 增加记录的窗口
class addWindow(QWidget):
    def __init__(self, parent=None):
        super(addWindow, self).__init__(parent)
        self.resize(400, 100)
        self.setStyleSheet(style)
        # self.setWindowOpacity(0.8)  # 窗口透明度
        # 设置增加记录的标签和文本框
        self.labelWebsite = QLabel("Website")
        self.labelID = QLabel("ID")
        self.labelPw = QLabel("Password")

        pe = QPalette()
        pe.setColor(QPalette.WindowText, Qt.white)
        self.labelWebsite.setPalette(pe)
        self.labelID.setPalette(pe)
        self.labelPw.setPalette(pe)

        self.labelWebsite.setFont(QFont("Courier New", 10, QFont.Bold))
        self.labelID.setFont(QFont("Courier New", 10, QFont.Bold))
        self.labelPw.setFont(QFont("Courier New", 10, QFont.Bold))

        self.lineeditWebsite = QLineEdit()
        self.lineeditID = QLineEdit()
        self.lineeditPw = QLineEdit()
        self.yesbtn = QPushButton('Yes')
        self.cancelbtn = QPushButton('Cancel')

        self.yesbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        self.yesbtn.setStyleSheet(button_hover)
        self.cancelbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        self.cancelbtn.setStyleSheet(button_hover)

        buttonLayout = QHBoxLayout()
        buttonLayout.addWidget(self.yesbtn)
        buttonLayout.addWidget(self.cancelbtn)
        layout = QVBoxLayout()
        layout.addWidget(self.labelWebsite)
        layout.addWidget(self.lineeditWebsite)
        layout.addWidget(self.labelID)
        layout.addWidget(self.lineeditID)
        layout.addWidget(self.labelPw)
        layout.addWidget(self.lineeditPw)
        layout.addLayout(buttonLayout)
        self.setLayout(layout)
        self.initui()

    def initui(self):
        self.setWindowFlags(Qt.FramelessWindowHint)  # 去窗口

    def paintEvent(self, event):  # 设置背景图片
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.drawPixmap(self.rect(), QPixmap('BM.png'))
        self.painter.end()

    def mousePressEvent(self, event):  # 以下3个函数用来使窗口可以拖动
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False


# 登录窗口
class LoginDialog(QDialog):
    def __init__(self, parent=None):
        QDialog.__init__(self, parent)
        # self.setWindowOpacity(0.9) #窗口透明度
        self.resize(400, 200)
        self.setStyleSheet(style)
        self.leName = QLineEdit(self)
        self.leName.setFixedHeight(30)
        self.leName.setPlaceholderText(u'Account')
        self.leName.setFont(QFont("Courier New", 10, QFont.Bold))
        self.lePassword = QLineEdit(self)
        self.lePassword.setFixedHeight(30)
        self.lePassword.setEchoMode(QLineEdit.Password)
        # .setEchoMode(EchoMode),设置输入框显示格式,0--Normal,1--NoEcho,2--Password,3--PasswordEchoOnEdit
        self.lePassword.setPlaceholderText(u'Password')
        self.lePassword.setFont(QFont("Courier New", 10, QFont.Bold))

        self.pbLogin = QPushButton(u'Login', self)
        self.pbCancel = QPushButton(u'Cancel', self)

        self.pbLogin.setFont(QFont("Courier New", 10, QFont.Bold))
        self.pbLogin.setStyleSheet(button_hover)
        self.pbCancel.setFont(QFont("Courier New", 10, QFont.Bold))
        self.pbCancel.setStyleSheet(button_hover)
        self.pbLogin.clicked.connect(self.login)
        self.pbCancel.clicked.connect(self.reject)

        layout = QVBoxLayout()
        layout.addWidget(self.leName)
        layout.addWidget(self.lePassword)
        buttonLayout = QHBoxLayout()
        buttonLayout.addWidget(self.pbLogin)
        buttonLayout.addWidget(self.pbCancel)
        layout.addLayout(buttonLayout)
        self.setLayout(layout)
        conn = sqlite3.connect('wcbAccount.db')
        c = conn.cursor()
        c.execute("SELECT ID,Password FROM t1 WHERE Website='admin'")
        self.myacc, self.mypw = c.fetchone()
        self.initui()

    def paintEvent(self, event):  # 设置背景图片
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.drawPixmap(self.rect(), QPixmap("BM.png"))
        self.painter.end()

    def login(self):
        if self.leName.text() == self.myacc and self.lePassword.text() == self.mypw:
            self.accept()  # 关闭对话框并返回1
            print('login successfully!')
        else:
            QMessageBox.critical(self, u'ERROR', u'User name password mismatch')

    def initui(self):
        self.setWindowFlags(Qt.FramelessWindowHint)  # 去窗口

    def mousePressEvent(self, event):  # 以下3个函数用来使窗口可以拖动
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False


# 修改登录信息
class xgdl(QDialog):
    def __init__(self, parent=None):
        super(xgdl, self).__init__(parent)
        self.resize(400, 250)
        # self.setWindowOpacity(0.8)  # 窗口透明度
        self.oldpw = QLineEdit(self)
        self.oldpw.setPlaceholderText(u'original password')
        self.oldpw.setFont(QFont("Courier New", 9, QFont.Bold))
        self.newacc = QLineEdit(self)
        self.newacc.setPlaceholderText(u'new username')
        self.newacc.setFont(QFont("Courier New", 9, QFont.Bold))
        self.newpw = QLineEdit(self)
        self.newpw.setPlaceholderText(u'new password')
        self.newpw.setFont(QFont("Courier New", 9, QFont.Bold))
        self.queren = QPushButton(u'Modify')
        self.quxiao = QPushButton(u'Cancel')

        self.queren.setFont(QFont("Courier New", 10, QFont.Bold))
        self.queren.setStyleSheet(button_hover)
        self.quxiao.setFont(QFont("Courier New", 10, QFont.Bold))
        self.quxiao.setStyleSheet(button_hover)

        layout = QVBoxLayout()
        layout.addWidget(self.oldpw)
        layout.addWidget(self.newacc)
        layout.addWidget(self.newpw)
        layout1 = QHBoxLayout()
        layout1.addWidget(self.queren)
        layout1.addWidget(self.quxiao)
        layout.addLayout(layout1)
        self.setLayout(layout)
        self.setStyleSheet(style)
        self.initui()

    def paintEvent(self, event):  # 设置背景图片
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.drawPixmap(self.rect(), QPixmap("BM.png"))
        self.painter.end()

    def initui(self):
        self.setWindowFlags(Qt.FramelessWindowHint)  # 去窗口

    def mousePressEvent(self, event):  # 以下3个函数用来使窗口可以拖动
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False


# 确认删除的窗口
class qrshanchu(QDialog):
    def __init__(self, parent=None):
        super(qrshanchu, self).__init__(parent)
        self.resize(300, 100)
        self.setWindowFlags(Qt.WindowCloseButtonHint)
        self.setStyleSheet(style)
        # self.setWindowOpacity(0.8)  # 窗口透明度
        self.btn1 = QPushButton("Yes")
        self.btn2 = QPushButton("Cancel")

        self.btn1.setFont(QFont("Courier New", 10, QFont.Bold))
        self.btn1.setStyleSheet(button_hover)
        self.btn2.setFont(QFont("Courier New", 10, QFont.Bold))
        self.btn2.setStyleSheet(button_hover)

        layout = QHBoxLayout()
        layout.addWidget(self.btn1)
        layout.addWidget(self.btn2)
        self.setLayout(layout)
        self.initui()

    def paintEvent(self, event):  # 设置背景图片
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.drawPixmap(self.rect(), QPixmap("BM.png"))
        self.painter.end()

    def initui(self):
        self.setWindowFlags(Qt.FramelessWindowHint)  # 去窗口

    def mousePressEvent(self, event):  # 以下3个函数用来使窗口可以拖动
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False


class modifyinfo(QWidget):
    def __init__(self, parent=None):
        super(modifyinfo, self).__init__(parent)
        self.resize(400, 100)
        self.setStyleSheet(style)
        # self.setWindowOpacity(0.8)  # 窗口透明度
        # 设置增加记录的标签和文本框
        self.labelWebsite = QLabel("New Website")
        self.labelID = QLabel("New ID")
        self.labelPw = QLabel("New Password")

        pe = QPalette()
        pe.setColor(QPalette.WindowText, Qt.white)
        self.labelWebsite.setPalette(pe)
        self.labelID.setPalette(pe)
        self.labelPw.setPalette(pe)

        self.labelWebsite.setFont(QFont("Courier New", 10, QFont.Bold))
        self.labelID.setFont(QFont("Courier New", 10, QFont.Bold))
        self.labelPw.setFont(QFont("Courier New", 10, QFont.Bold))

        self.lineeditWebsite = QLineEdit()
        self.lineeditID = QLineEdit()
        self.lineeditPw = QLineEdit()
        self.yesbtn = QPushButton('Yes')
        self.cancelbtn = QPushButton('Cancel')

        self.yesbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        self.yesbtn.setStyleSheet(button_hover)
        self.cancelbtn.setFont(QFont("Courier New", 10, QFont.Bold))
        self.cancelbtn.setStyleSheet(button_hover)

        buttonLayout = QHBoxLayout()
        buttonLayout.addWidget(self.yesbtn)
        buttonLayout.addWidget(self.cancelbtn)
        layout = QVBoxLayout()
        layout.addWidget(self.labelWebsite)
        layout.addWidget(self.lineeditWebsite)
        layout.addWidget(self.labelID)
        layout.addWidget(self.lineeditID)
        layout.addWidget(self.labelPw)
        layout.addWidget(self.lineeditPw)
        layout.addLayout(buttonLayout)
        self.setLayout(layout)
        self.initui()

    def initui(self):
        self.setWindowFlags(Qt.FramelessWindowHint)  # 去窗口

    def paintEvent(self, event):  # 设置背景图片
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.drawPixmap(self.rect(), QPixmap("BM.png"))
        self.painter.end()

    def mousePressEvent(self, event):  # 以下3个函数用来使窗口可以拖动
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False


# 主窗口
class mainw(QMainWindow):
    def __init__(self, parent=None):
        super(mainw, self).__init__(parent)
        self.setWindowIcon(QIcon("exit.ico"))
        self.window1 = TestWidget()
        self.window2 = qrshanchu()
        self.window3 = addWindow()
        self.window4 = xgdl()
        self.window5 = modifyinfo()

        self.statusBar()  # 创建一个空的状态栏
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('File')
        eidtMenu = menubar.addMenu('Edit')
        setMenu = menubar.addMenu('Settings')
        helpMenu = menubar.addMenu('Help')

        # 给menu创建一个Action
        exitAction = QAction(QIcon('exit.png'), 'Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit Application')
        exitAction.triggered.connect(qApp.quit)
        # 将这个Action添加到fileMenu上
        fileMenu.addAction(exitAction)

        # 给Edit创建Action
        # 第一个，增加一条记录
        addAction = QAction(QIcon("add.png"), 'Add', self)
        addAction.setShortcut('Ctrl+N')
        addAction.setStatusTip('Add one information')
        addAction.triggered.connect(self.addclick)
        eidtMenu.addAction(addAction)
        # 第二个，删除一条记录
        delAction = QAction(QIcon("delete_fill.png"), 'Delete', self)
        delAction.setShortcut('Delete')
        delAction.setStatusTip('Delete one information')
        delAction.triggered.connect(self.subclick)
        eidtMenu.addAction(delAction)
        # 第三个，修改一条记录
        modifyAction = QAction(QIcon("modify.png"), 'Modify', self)
        modifyAction.setShortcut('Ctrl+M')
        modifyAction.setStatusTip('Modify one information')
        modifyAction.triggered.connect(self.modifyThisRow)
        eidtMenu.addAction(modifyAction)

        # 给Settings创建Action
        modifyLogin = QAction(QIcon("modify_login.png"), 'Modify Login Information', self)
        # modifyLogin.setShortcut('')
        modifyLogin.setStatusTip('Modify Login Information')
        modifyLogin.triggered.connect(self.xg)
        setMenu.addAction(modifyLogin)

        aboutAction = QAction(QIcon("about.png"), 'About', self)
        # aboutAction.setShortcut('Ctrl+M')
        aboutAction.setStatusTip('About this software')
        aboutAction.triggered.connect(self.aboutbtn)
        helpMenu.addAction(aboutAction)

        self.setWindowTitle('Account Manager')
        # self.setGeometry(300, 300, 450, 450)

        self.mainFormLayout = QVBoxLayout(self.window1)
        self.window1.setLayout(self.mainFormLayout)
        self.setCentralWidget(self.window1)
        # self.window1.addbtn.clicked.connect(self.addclick)
        # self.window1.delbtn.clicked.connect(self.subclick)
        # self.window1.cz.clicked.connect(self.xg)
        # self.window1.modify.clicked.connect(self.modifyThisRow)
        # self.window1.Tabclose.clicked.connect(self.closeWindow)
        self.window2.btn1.clicked.connect(self.yes)
        self.window2.btn2.clicked.connect(self.no)
        self.window3.yesbtn.clicked.connect(self.myinput)
        self.window3.cancelbtn.clicked.connect(self.cancelInput)
        self.window4.queren.clicked.connect(self.cz)
        self.window4.quxiao.clicked.connect(self.qx)
        self.window5.yesbtn.clicked.connect(self.confirmModifyInfo)
        self.window5.cancelbtn.clicked.connect(self.cancelModifyInfo)

    def aboutbtn(self):
        QMessageBox.about(self, u'About',
                          u'Account Manager (Version 1.1)\n\nThis software is used to record your account and password. The \'admin\' row represents login information, it cannot be delete!\n\n\n\nwcb All Rights Reserved')

    def cancelModifyInfo(self):
        self.window5.close()
        self.window5.lineeditWebsite.setText('')
        self.window5.lineeditID.setText('')
        self.window5.lineeditPw.setText('')

    def confirmModifyInfo(self):
        index = self.window1.view.currentIndex()
        web = self.window1.model.index(index.row(), 0).data()
        acc = self.window1.model.index(index.row(), 1).data()
        pw = self.window1.model.index(index.row(), 2).data()
        inputWs = self.window5.lineeditWebsite.text()
        inputAcc = self.window5.lineeditID.text()
        inputPw = self.window5.lineeditPw.text()
        conn = sqlite3.connect('wcbAccount.db')
        c = conn.cursor()
        print(web, acc, pw)
        # c.execute("SELECT Website,ID,Password FROM t1 WHERE Website='%s'" % web)
        # info = c.fetchone()
        c.execute(
            "UPDATE t1 SET Website='%s',ID='%s', Password='%s' WHERE Website == '%s' AND ID == '%s' AND Password == '%s' " % (
                inputWs, inputAcc, inputPw, web, acc, pw))
        conn.commit()
        self.window5.lineeditWebsite.setText('')
        self.window5.lineeditID.setText('')
        self.window5.lineeditPw.setText('')
        self.window1.model.submitAll()
        self.window5.close()

    def modifyThisRow(self):
        self.window5.show()

    def addclick(self):
        self.window3.show()

    def subclick(self):
        self.window2.show()

    def xg(self):
        self.window4.show()

    # def closeWindow(self):
    #     self.window1.close()
    #     self.window2.close()
    #     self.window3.close()

    def yes(self):
        index = self.window1.view.currentIndex()
        if not self.window1.model.index(index.row(), 0).data() == 'admin':
            self.window1.model.removeRow(index.row())
        else:
            QMessageBox.warning(self, u'Warning', u'Cannot delete this message!')
        self.window1.model.submitAll()
        self.window2.close()

    def no(self):
        self.window2.close()

    def myinput(self):
        q = QSqlQuery()
        inputWs = self.window3.lineeditWebsite.text()
        inputAcc = self.window3.lineeditID.text()
        inputPw = self.window3.lineeditPw.text()
        if not inputWs == 'admin':
            q.exec_(u"insert into t1 values('%s','%s','%s')" % (inputWs, inputAcc, inputPw))
            q.exec_("commit")
            self.window3.lineeditWebsite.setText('')
            self.window3.lineeditID.setText('')
            self.window3.lineeditPw.setText('')
            self.window1.model.submitAll()
            self.window3.close()
        else:
            QMessageBox.warning(self, u'Warning', r"Website cannot be 'admin!'")
            self.window3.close()

    def cancelInput(self):
        self.window3.close()

    def cz(self):
        oldpw = self.window4.oldpw.text()
        nacc = self.window4.newacc.text()
        npw = self.window4.newpw.text()
        conn = sqlite3.connect('wcbAccount.db')
        c = conn.cursor()
        c.execute("SELECT Password FROM t1 WHERE Website='admin'")
        if oldpw == c.fetchone()[0]:
            if nacc and npw:
                conn = sqlite3.connect('wcbAccount.db')
                c = conn.cursor()
                c.execute("UPDATE t1 SET ID='%s' WHERE Website = 'admin'" % nacc)
                c.execute("UPDATE t1 SET Password='%s' WHERE Website = 'admin'" % npw)
                conn.commit()
                self.window4.oldpw.setText('')
                self.window4.newacc.setText('')
                self.window4.newpw.setText('')
                self.window4.close()
                self.window1.model.submitAll()
            else:
                QMessageBox.critical(self, u'Warning', u'Cannot be empty!')
        else:
            QMessageBox.critical(self, u'Warning', u'Wrong Password')

    def qx(self):
        self.window4.close()
        self.window4.oldpw.setText('')
        self.window4.newacc.setText('')
        self.window4.newpw.setText('')


if __name__ == "__main__":
    a = QApplication(sys.argv)
    createConnection()
    createTable()
    dlck = LoginDialog()
    if dlck.exec_():
        w = mainw()
        w.resize(1400, 800)
        w.show()
        sys.exit(a.exec_())
